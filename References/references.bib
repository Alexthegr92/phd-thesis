@inproceedings{brown2019aura,
	title={Aura projection for scalable real-time physics},
	author={Brown, Alexander and Ushaw, Gary and Morgan, Graham},
	booktitle={Proceedings of the ACM SIGGRAPH Symposium on Interactive 3D Graphics and Games},
	pages={1},
	year={2019},
	organization={ACM}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{ThousandEyesCloudPerf2019,
	author = {ThousandEyes},
	title = {Cloud Performance Benchmark 2019-2020 Edition},
	url = {https://www.thousandeyes.com/resources/cloud-performance-benchmark-report-november-2019},
	note = {(Accessed on 11/12/2019)},
	year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{ThousandEyesCloudPerf2018,
	author = {ThousandEyes},
	title = {2018 Public Cloud Performance Benchmark Report},
	url = {https://www.thousandeyes.com/resources/2018-public-cloud-performance-benchmark-report},
	note = {(Accessed on 11/12/2019)},
	year = {2018}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{NetcodeBattlenonsense,
	author = {{Chris "Battle(non)sense"}},
	title = {How netcode works, and what makes 'good' netcode},
	url = {https://www.pcgamer.com/uk/netcode-explained/},
	note = {(Accessed on 11/12/2019)},
	year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@inproceedings{lee2015evaluation,
	title={Evaluation of lag-related configurations in first-person shooter games},
	author={Lee, Wai-Kiu and Chang, Rocky KC},
	booktitle={2015 International Workshop on Network and Systems Support for Games (NetGames)},
	pages={1--3},
	year={2015},
	organization={IEEE}
}
--------------------------------------------------------------------------------------------------------------------------------
http://dl.acm.org/citation.cfm?id=1467987
@inproceedings{Bezerra2008,
 author = {Bezerra, Carlos Eduardo and Cecin, F\'{a}bio R. and Geyer, Cl\'{a}udio F.  R.},
 title = {A3: A Novel Interest Management Algorithm for Distributed Simulations of MMOGs},
 booktitle = {Proceedings of the 2008 12th IEEE/ACM International Symposium on Distributed Simulation and Real-Time Applications},
 series = {DS-RT '08},
 year = {2008},
 isbn = {978-0-7695-3425-1},
 pages = {35--42},
 abstract={Traditionally, a central server is utilized to provide support to MMOGs (massively multiplayer online games), where the number of participants is in the order of tens of thousands. Much work has been done trying to create a fully peer-to-peer model to support this kind of application, in order to minimize the maintenance cost of its infrastructure, but critical questions remain.
 Examples of the problems relative to peer-to-peer MMOG support systems are: vulnerability to cheating, overload of the upload links of the peers and difficulty to maintain consistency of the simulation among the participants. In this work, we propose the utilization of geographically distributed lower-cost nodes, working as a distributed game server. The distribution model and some related
 works are also presented. To address the communication cost imposed to the servers, we specify the A3 algorithm, which is a novel refinement of the interest management technique, significantly reducing the necessary bandwidth. Simulations have been made with ns-2 and their results demonstrate that our approach achieves the least bandwidth utilization, with a 33.10p maximum traffic
 reduction and 33.58p average traffic reduction, when compared to other algorithms.},
 numpages = {8},
 url = {http://dx.doi.org/10.1109/DS-RT.2008.11},
 doi = {10.1109/DS-RT.2008.11},
 acmid = {1467987},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {interest management, MMOG, distributed simulation},
} 
--------------------------------------------------------------------------------------------------------------------------------
Interactive rigid body simulation is an important part of many modern computer tools, which no authoring tool nor game engine can do without. Such high-performance computer tools open up new possibilities for changing how designers, engineers, modelers and animators work with their design problems. This paper is a self contained state-of-the-art report on the physics, the models, the numerical methods and the algorithms used in interactive rigid body simulation all of which have evolved and matured over the past 20 years. Furthermore, the paper communicates the mathematical and theoretical details in a pedagogical manner. This paper is not only a stake in the sand on what has been done, it also seeks to give the reader deeper insights to help guide their future research.
@article {CGF:CGF12272,
author = {Bender, Jan and Erleben, Kenny and Trinkle, Jeff},
title = {Interactive Simulation of Rigid Body Dynamics in Computer Graphics},
journal = {Computer Graphics Forum},
volume = {33},
number = {1},
issn = {1467-8659},
url = {http://dx.doi.org/10.1111/cgf.12272},
doi = {10.1111/cgf.12272},
pages = {246--270},
keywords = {rigid body dynamics, contact mechanics, articulated bodies, jointed mechanisms, contact point generation, iterative methods, Computer Graphics [I.3.5]: Computational Geometry and Object Modelling—Physically-based modelling, Computer Graphics [I.3.7]: Three-Dimensional Graphics and Realism—Animation, Mathematics of Computing [G.1.6]: Numerical Analysis—Nonlinear programming},
year = {2014},
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{GDC,
    author = {GDC},
    title = {{GDC} {2016: PhysX GPU Rigid Body and Nvidia Flow | PhysXInfo.com - PhysX News}},
    url = {http://physxinfo.com/news/12649/gdc-2016-physx-gpu-rigid-body-and-nvidia-flow/},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{SpatialOS,
	author = {Improbable Limited},
    title = {Spatial{OS}},
    url = {https://spatialos.improbable.io/},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@article{coller2009effectiveness,
  title={Effectiveness of using a video game to teach a course in mechanical engineering},
  author={Coller, Brianno D and Scott, Michael J},
  journal={Computers \& Education},
  volume={53},
  number={3},
  pages={900--912},
  year={2009},
  publisher={Elsevier}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{desimulating,
  title={Simulating Rigid-Bodies, Strings and Nets for Engineering Applications Using Gaming Industry Physics Simulators},
  author={de Jong, JH and Wormnes, K and Tiso, P},
  howpublished =  {\url{http://robotics.estec.esa.int/i-SAIRAS/isairas2014/Data/Session\%209b/ISAIRAS\_FinalPaper\_0035.pdf}},
  note = {(Accessed on 14/04/2017)}
}

--------------------------------------------------------------------------------------------------------------------------------
Simulation systems are becoming common in different knowledge fields, such as aeronautics, defense, and industrial applications, among many others. While in the past these systems where mostly based on typical Virtual Reality Environments, with the advance of the game industry simulators are being developed using typical game engines and gaming software architectures. Distributed computing is being used in several fields to solve many computation intensive problems. Due the complexity of Simulation systems, this architecture can also be used, devoting host processing to renderization, which is usually the task that simulators spend most of its processing time. By using distributed computing, simulators could need softer system requirements, since the main loop would be distributed. This work presents concepts of simulator software, which is based on the main loop technique. After describing state-of-the-art concepts, we present an efficient automatic load balancing and distributing logic computation among several computers for simulators.
@Inbook{Joselli2014,
author="Joselli, Mark
and Zamith, Marcelo
and Valente, Luis
and Feij{\'o}, Bruno
and Leta, Fabiana R.
and Clua, Esteban",
editor="Rodrigues Leta, Fabiana",
title="A Distributed Architecture for Simulation Environments Based on Game Engine Systems",
bookTitle="Visual Computing: Scientific Visualization and Imaging Systems",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="41--61",
isbn="978-3-642-55131-4",
doi="10.1007/978-3-642-55131-4_2",
url="http://dx.doi.org/10.1007/978-3-642-55131-4_2"
}
--------------------------------------------------------------------------------------------------------------------------------
We describe approaches for satisfying the real-time collision detection requirements of distributed virtual environments. We assume a distributed virtual environment is deployed using client/server architecture typical of commercial massive multiplayer online games. We exploit the scalability provided by the clustering of servers in the development of a real-time collision detection service that may scale to satisfy the requirements of virtual environments that are constructed of many thousands of objects. We present performance figures that show our approaches to be scalable in that an addition of servers to a cluster results in an increased number of objects that can be considered for collision detection in real-time.
@INPROCEEDINGS{Morgan2005,
author={G. Morgan and K. Storey},
booktitle={19th International Conference on Advanced Information Networking and Applications (AINA'05) Volume 1 (AINA papers)},
title={Scalable collision detection for massively multiplayer online games},
year={2005},
volume={1},
pages={873-878 vol.1},
keywords={client-server systems;computer games;real-time systems;virtual reality;workstation clusters;client-server architecture;distributed virtual environment;multiplayer online game;real-time collision detection;server clustering;Application software;Automata;Avatars;Detection algorithms;Middleware;Navigation;Object detection;Scalability;Virtual environment;Web server},
doi={10.1109/AINA.2005.302},
ISSN={1550-445X},
month={March},}
--------------------------------------------------------------------------------------------------------------------------------
Several simulations for parallel collision detection have
been suggested during the last years. The algorithms
usually greatly depend on the parallel infrastructure and
this dependency causes in many times non-scalability
performance. The dependency also harms the portability
of the simulation. This paper suggests a scalable and
portable parallel algorithm for collision detection
simulation that fits both clusters and MPI machines.
@inproceedings{grinberg2007scalable,
  title={Scalable parallel collision detection simulation.},
  author={Grinberg, Ilan and Wiseman, Yair},
  booktitle={SIP},
  volume={7},
  pages={380--385},
  year={2007}
}
--------------------------------------------------------------------------------------------------------------------------------
In many virtual reality applications it is necessary to simulate
the interaction among solid objects. One of the basic
requirements is to ensure a non-penetration of rigid bodies.
We show algorithms for detecting a collision of moving
bodies along with the exact time of collision determination.
Next we present a method for computation the postcollision
velocities and positions of colliding objects. In
our approach we exploit the laws of classical mechanics,
however the physical accuracy is not the goal. We sacrifice
the accuracy in exchange for simple and real-time
algorithms.
@INPROCEEDINGS{Kavan-03-RB,
 author = {Ladislav Kavan},
 title = {Rigid Body Collision Response},
 booktitle = {Proceedings of the 7th Central European Seminar on Computer Graphics},
 year = {2003},
}
--------------------------------------------------------------------------------------------------------------------------------
Multiplayer, online computer games often distribute game-object state to client machines in order to improve game scalability and responsiveness. Network latency and jitter are concerns in this context, although the impact is reduced by the use of predictive techniques such as dead reckoning. These techniques, however, introduce consistency concerns for important and hard to predict behaviours, such as object collisions. In these cases a centralized authority or client/server architecture is typically used to ensure strong consistency, limiting game scalability. In this work we propose a motion-lock protocol for distributed game collision detection and resolution. The motion-lock protocol improves performance of motion prediction by giving stations time to communicate and agree on the detected collisions. This reduces the divergence of object states and post-collision trajectories. Offline and online simulation results show the motion-lock protocol is able to maintain strong consistency in collision count and reduces post-collision deviation with a small sacrifice of 3-4% in responsiveness of player controls. Qualitatively, the visual result of the collision response is greatly improved. With the motion-lock protocol, multiplayer online games can offload basic collision detection and resolution to game clients, increasing scalability without overly sacrificing consistency.

@MastersThesis{chen-10-distributed-TH,
  author = 		 {Ching Ling Tom Chen},
  title = 		 {Distributed collision detection and resolution},
  school = 		 {McGill University},
  year = 		 2010,
  address =		 {Montr{\'e}al, Canada},
  month =		 {May}
}
--------------------------------------------------------------------------------------------------------------------------------
Scalability of multiplayer games can be improved by client-side processing of game actions. Consistency becomes a concern, however, in the case of unpredictable but important events such as object interactions. We propose here a new motion-lock protocol for distributed collision detection and resolution. The motion-lock protocol improves performance of motion prediction by giving stations time to communicate and agree on the detected collisions. This reduces the divergence of distributed object states and post-collision trajectories. Offline and online simulation results show the motion-lock protocol results in qualitative and quantitative improvements to consistency, with negligible network impact and a minimal sacrifice in the responsiveness of player controls. Our design can be used to hide latency and reduce server load in current multiplayer online games, improving scalability and furthering fully distributed designs.
http://ieeexplore.ieee.org/abstract/document/5680187/
@inproceedings{chen-10-protocol,
 author = {Tom Ching Ling Chen and Clark Verbrugge},
 title = {A Protocol for Distributed Collision Detection},
 booktitle = {NetGames 2010: Proceedings of the 9th Annual Workshop on Network and Systems Support for Games},
 year = {2010},
 location = {Taipei, Taiwan},
 pages = {6:1--6:6},
} 
--------------------------------------------------------------------------------------------------------------------------------
We present a new parallel algorithm for collision detection using many-core computing platforms of CPUs or GPUs. 
Based on the notion of a p-partition front, our algorithm is able to evenly partition and distribute the workload of BVH traversal among multiple processing cores without the need for dynamic balancing, while minimizing the memory overhead inherent to the state-of-the-art parallel collision detection algorithms. 
We demonstrate the scalability of our algorithm on different benchmarking scenarios with and without using temporal coherence, including dynamic simulation of rigid bodies, cloth simulation, and random collision courses. 
In these experiments, we observe nearly linear performance improvement in terms of the number of processing cores on the CPUs and GPUs.
http://ieeexplore.ieee.org/document/6620867/
@ARTICLE{6620867,
author={X. Zhang and Y. J. Kim},
journal={IEEE Transactions on Visualization and Computer Graphics},
title={Scalable Collision Detection Using p-Partition Fronts on Many-Core Processors},
year={2014},
volume={20},
number={3},
pages={447-456},
keywords={graphics processing units;multiprocessing systems;parallel algorithms;CPU;GPU;dynamic balancing;manycore computing platforms;manycore processors;multiple processing cores;p-partition fronts;parallel algorithm;parallel collision detection algorithms;scalable collision detection;Approximation algorithms;Approximation methods;Coherence;Heuristic algorithms;Memory management;Partitioning algorithms;Program processors;$(p)$-partition;Collision detection;static workload balancing},
doi={10.1109/TVCG.2013.239},
ISSN={1077-2626},
month={March},}
--------------------------------------------------------------------------------------------------------------------------------
Distributed Virtual Environments (DVEs) provide a mechanism whereby dispersed users can interact with one-another within a shared \'irtual world. DVEs commonly allow users to interact with one-another in ways analogous to the real-world, e.g. mimicking Newtonian physics. A scalable DVE should enable large numbers of users to participate simultaneously, regardless of the In geographical location and hardware configurations of individual users. addition, these users should perceive a mutually-consistent virtual world in which each user perceives a consistent series of events in real-time. Collision detection and response is a fundamental requirement of most virtual environments and simulations. It is a computationally-expensive operation which must be perfonned at frequent intervals in all virtual environments which simulate the motion of solid objects. Collision detection has received large amounts of research interest and as a result a number of efficient collision detection algorithms have been proposed. However, these collision detection approaches are designed to detect collisions efficiently in simulations run on a single machine and are not capable of overcoming problems associated with scalability and consistency, which are of paramount importance in DVEs. This thesis presents a new collision detection approach, tenned distributed collision detection, which provides high-levels of scalability, consistency and responsiveness. This thesis presents the algorithms and theory which underpin the distributed collision detection approach and provides experimental results demonstrating its scalability and responsiveness.

@article{storey2007scalable,
  title={Scalable collision detection for distributed virtual environments},
  author={Storey, Kier},
  year={2007},
  publisher={Newcastle University}
}
--------------------------------------------------------------------------------------------------------------------------------
This paper presents an algorithm to determine intersecting surfaces at interactive speed in a virtual prototyping environment. 
The proposed algorithm is based on the overlapping axis-aligned bounding box (OAABB). 
The OAABB concept is used effectively to eliminate the number of surfaces that cannot intersect and improve performance. 
The algorithm also facilitates the implementation using parallel computing methods. 
OpenMP is used, taking advantage of shared memory multiple processors and reducing the overall time complexity of the collision detection algorithm. 
To achieve an efficient parallel simulation, it is necessary to provide an efficient load balancing scheme. 
Our experiences in parallelising the code to achieve a better work distribution are also described.
http://ieeexplore.ieee.org/abstract/document/1316102/
@INPROCEEDINGS{1316102,
author={M. Figueiredo and T. Fernando},
booktitle={Proceedings. Tenth International Conference on Parallel and Distributed Systems, 2004. ICPADS 2004.},
title={An efficient parallel collision detection algorithm for virtual prototype environments},
year={2004},
pages={249-256},
keywords={CAD;collision avoidance;computational geometry;digital simulation;open systems;parallel algorithms;parallel programming;parallelising compilers;production engineering computing;resource allocation;shared memory systems;virtual prototyping;OpenMP;automatic recognition;code parallelisation;geometric constraints;intersecting surfaces;load balancing;overall time complexity;overlapping axis-aligned bounding box;parallel application;parallel collision detection;parallel computing;parallel simulation;real industrial applications;shared memory multiple processors;virtual assembly;virtual prototype applications;virtual prototyping environment;work distribution;Assembly;Computational modeling;Conference management;Design automation;Detection algorithms;Filters;Parallel processing;Software prototyping;Virtual environment;Virtual prototyping},
doi={10.1109/ICPADS.2004.1316102},
ISSN={1521-9097},
month={July},}
--------------------------------------------------------------------------------------------------------------------------------
Concerning the requirements of real-time and accurate collision detection in interactive system, we propose a shared memory parallel collision detection algorithm. First we incorporate the merits of both AABB bounding box and bounding spheres to construct a hybrid bounding representation of arbitrary non-convex polyhedra (S-AABB) for attaining speed, and then use OpenMP parallel programming model to traversal the built hybrid bounding volume hierarchy, so further accelerate the collision detection algorithm. At last, experiments results have shown that our algorithm is advantageous over other current typical collision detection algorithms such as I-COLLIDE [1] regarding efficiency and accuracy, so can meet the real-time and accurate requirements in complex interactive virtual environment.
@INPROCEEDINGS{4675468,
author={W. Zhao and R. p. Tan and Wen-hui Li},
booktitle={2008 Asia Simulation Conference - 7th International Conference on System Simulation and Scientific Computing},
title={Parallel collision detection algorithm based on mixed BVH and OpenMP},
year={2008},
pages={786-792},
keywords={parallel algorithms;parallel programming;AABB bounding box;OpenMP parallel programming;arbitrary nonconvex polyhedra;bounding spheres;bounding volume hierarchy;shared memory parallel collision detection algorithm;Computational geometry;Computer science;Concurrent computing;Detection algorithms;Object detection;Robot control;Space technology;Testing;Virtual environment;Virtual reality},
doi={10.1109/ASC-ICSC.2008.4675468},
month={Oct},}
--------------------------------------------------------------------------------------------------------------------------------
Collision detection plays an important role in the robot motion planning, virtual environment, distributed interactive simulation. As the geometric complexity of the virtual environment and parallel computing capability of modern CPU increase, and the aim to achieve rapid precise collision detection, parallel technology is widely used in collision detection algorithm. The paper describes several parallel collision detection algorithms, and has focused on the analysis and comparison of parallel technology. Collision detection plays an important role in the robot motion planning, virtual environment, distributed interactive simulation. As the geometric complexity of the virtual environment and parallel computing capability of modern CPU increase, and the aim to achieve rapid precise collision detection, parallel technology is widely used in collision detection algorithm. The paper describes several parallel collision detection algorithms, and has focused on the analysis and comparison of parallel technology.
http://ieeexplore.ieee.org/document/5629854/
@INPROCEEDINGS{5629854,
author={T. Ruipu and Z. Wei and L. Jing},
booktitle={2010 International Conference on Multimedia Technology},
title={The Study of Parallel Collision Detection Algorithms},
year={2010},
pages={1-4},
keywords={collision avoidance;computational complexity;computational geometry;computer graphics;parallel processing;virtual reality;geometric complexity;parallel collision detection algorithm;parallel computing capability;precise collision detection;virtual environment;Algorithm design and analysis;Computational modeling;Computers;Detection algorithms;Message systems;Pipeline processing},
doi={10.1109/ICMULT.2010.5629854},
month={Oct},}
--------------------------------------------------------------------------------------------------------------------------------
Fast and accurate collision detection between general polygonal models is a fundamental problem in physically based and geometric modeling, robotics, animation, and computer-simulated environments. Most earlier collision detection algorithms are either restricted to a class of models (such as convex polytopes) or are not fast enough for practical applications. The authors present an incremental algorithm for collision detection between general polygonal models in dynamic environments. The algorithm combines a hierarchical representation with incremental computation to rapidly detect collisions. It makes use of coherence between successive instances to efficiently determine the number of object features interacting. For each pair of objects, it tracks the closest features between them on their respective convex hulls. It detects the objects' penetration using pseudo internal Voronoi cells and constructs the penetration region, thus identifying the regions of contact on the convex hulls. The features associated with these regions are represented in a precomputed hierarchy. The algorithm uses a coherence based approach to quickly traverse the precomputed hierarchy and check for possible collisions between the features. They highlight its performance on different applications.
http://ieeexplore.ieee.org/document/582346/
@ARTICLE{582346,
author={M. K. Ponamgi and D. Manocha and M. C. Lin},
journal={IEEE Transactions on Visualization and Computer Graphics},
title={Incremental algorithms for collision detection between polygonal models},
year={1997},
volume={3},
number={1},
pages={51-64},
keywords={computer animation;digital simulation;path planning;solid modelling;virtual reality;animation;closest feature tracking;collision detection;computer-simulated environments;contact regions;convex hulls;dynamic environments;geometric modeling;hierarchical representation;incremental algorithms;interacting object features;object penetration;physically based modeling;polygonal models;precomputed hierarchy;pseudo internal Voronoi cells;robotics;successive instance coherence;Application software;Coherence;Computational modeling;Computer aided manufacturing;Design automation;Detection algorithms;Robots;Solid modeling;Vehicle dynamics;Virtual prototyping},
doi={10.1109/2945.582346},
ISSN={1077-2626},
month={Jan},}
--------------------------------------------------------------------------------------------------------------------------------
Large-scale distributed simulations model the activities of thousands of entities interacting in a virtual environment simulated over wide area networks. Originally these systems used protocols which dictated that all entities broadcast messages about all activities, including remaining immobile or inactive, to all other entities, resulting in an explosion of incoming messages for all entities, most of which  are  of  no  interest. Using a filtering mechanism called Interest Management, some of these systems now allow entities to express interest in only the subset of information which is relevant to them. This paper surveys seven such systems, describing the purpose of the system, its scope, and the salient characteristics of it Interest Management scheme. I  present the first taxonomy for such systems and classify the seven systems according to the taxonomy. The analysis of the classification  points  to  potential  areas  of  research  in  Interest  Management.
@book{morse1996interest,
  title={Interest management in large-scale distributed simulations},
  author={Morse, Katherine L and others},
  year={1996},
  publisher={Information and Computer Science, University of California, Irvine}
}
--------------------------------------------------------------------------------------------------------------------------------
We present a novel software framework for developing highly animated virtual reality applications.  Using a modular application design, our goal is to alleviate software engineering issues while yielding efficient execution on parallel machines. We target worlds involving numerous animated objects managed by physical based simulations. Mixing rigid objects, fluids, mass-spring or other deformable objects leads to complex interactions between them. Today no unified simulation algorithm with a reasonable complexity is available to manage all these types of objects. We propose a framework for coupling and distributing existing algorithms. We reuse and extend the data-flow model where an application is built from modules exchanging data through connections. The model relies on two main classes of modules, animators and interactors. Animators are responsible for updating objects’ states from forces applied to them. These forces are computed in parallel by interactors using the objects’ states they receive from animators. The network interconnecting modules can be progressively optimized. From a simple fully connected network enforcing a synchronous semantics, it can evolve towards an active network able to implement a bounding volume based dynamic routing or an asynchronous data re-sampling. As a result, we present an application managing interactions between rigid objects, mass-spring objects and a fluid. It is executed in real-time on a 54 processors cluster driving 5 cameras and 16 projectors for user interactions.
@inproceedings{allard2006distributed,
  title={Distributed physical based simulations for large vr applications},
  author={Allard, Jeremie and Raffin, Bruno},
  booktitle={Virtual Reality Conference, 2006},
  pages={89--96},
  year={2006},
  organization={IEEE}
}
--------------------------------------------------------------------------------------------------------------------------------
We  present  an  approach  to  collision  detection  that  is   appropriate   for   satisfying   the   requirements   of   interest   management   schemes   used   in   distributed   virtual     environments.     Such     environments     are     characterized  by  their  distributed  deployment  over  a  number  of  nodes  connected  via  a  computer  network.  The  aim  of  an  interest  management  scheme  is  to  identify   when   objects   that   populate   a   simulation   supported by a distributed virtual environment (objects could   be   hosted   on   different   nodes)   should   be   interacting  via  message  exchange  while  preventing  objects that should not be interacting from exchanging messages.    The    approach    to    collision    detection presented in this paper produces accurate results when determining   object   interactions.   Furthermore,   we present  variations  on  our  approach  that  exploit  any coherence  that  may  exist  in  a  simulation  to  provide  a solution that may scale for large numbers of objects. 
@inproceedings{storey2004determining,
  title={Determining collisions between moving spheres for distributed virtual environments},
  author={Storey, Kier and Lu, Fengyun and Morgan, Graham},
  booktitle={Computer Graphics International, 2004. Proceedings},
  pages={140--147},
  year={2004},
  organization={IEEE}
}
--------------------------------------------------------------------------------------------------------------------------------
The scale of large-scale virtual environments (LSVEs) is limited by the ability of 
the supporting infrastructure to deliver data to participants in a timely manner. Multicast 
can improve data delivery time by minimizing message send time similarly to broadcast, 
while reducing the delivery of extraneous messages which goes with broadcast. However, 
multicast groups are typically limited resources, mostly due to hardware limitations. 
Significant performance improvements have been made using judicious, static 
assignments of multicast groups based on pre-defined criteria such as geographic location. 
However, such static approaches ultimately lack the flexibility to scale to meet the 
requirements of highly dynamic LSVEs. Dynamic multicast grouping has been considered 
to be too computationally expensive to be practically applicable. This dissertation derives 
a straightforward heuristic based on readily available data from which various 
computationally inexpensive algorithms can be derived. Through experiments with 
simulations and a well-known LSVE environment, the feasibility of general application of 
these algorithms is demonstrated, as well as the significant reduction in the use of 
multicast groups they achieve. Finally, experimentation and analysis demonstrate that the 
real issue with dynamic assignment of multicast groups is the time required to reconfigure 
multicast hardware.
@phdthesis{morse2000adaptive,
  title={An adaptive, distributed algorithm for interest management},
  author={Morse, Katherine Lee},
  year={2000},
  school={University of California, Irvine}
}
--------------------------------------------------------------------------------------------------------------------------------
A distributed virtual environment (DVE) is a software system that allows users in a
network to interact with each other by sharing a common view of their states. As
users are geographically distributed over large networks like the internet and the
number of users increases, scalability is a key aspect to consider for real-time inter-
action. Various solutions have been proposed to improve the scalability in DVE sys-
tems but they are either focused on only specific aspects or customized to a target
application. In this paper, we classify the approaches for improving scalability of DVE
into five categories: communication architecture, interest management, concurrency
control, data replication, and load distribution. We then propose a scalable network
framework for DVEs, ATLAS. Incorporated with our various scalable schemes,
ATLAS meets the scalability of a system as a whole. The integration experiences of
ATLAS with several virtual reality systems ensure the versatility of the proposed
solution.
@inproceedings{lee2002atlas,
  title={ATLAS: a scalable network framework for distributed virtual environments},
  author={Lee, Dongman and Lim, Mingyu and Han, Seunghyun},
  booktitle={Proceedings of the 4th international conference on Collaborative virtual environments},
  pages={47--54},
  year={2002},
  organization={ACM}
}
--------------------------------------------------------------------------------------------------------------------------------
Collision detection for dynamic objects in distributed virtual environments is still an open research topic. The problems of network latency and available network bandwidth prevent exact common solutions. The consistency-throughput tradeoff states that a distributed virtual environment cannot be consistent and highly dynamic at the same time. Remote object visualization is used to extrapolate and predict the movement of remote objects reducing the bandwidth required for good approximations of the remote objects. Few update messages aggravate the effect of network latency for collision detection. In this paper, new approach extending remote object visualization techniques is demonstrated to improve the results of collision detection in distributed virtual environments. We showed how this can significantly reduce the approximation errors caused by remote object visualization techniques. This is done by predicting collisions between remote objects and adaptively changing the parameters of these techniques.
http://ieeexplore.ieee.org/abstract/document/1310059/
@INPROCEEDINGS{1310059,
author={J. Ohlenburg},
booktitle={IEEE Virtual Reality 2004},
title={Improving collision detection in distributed virtual environments by adaptive collision prediction tracking},
year={2004},
pages={83-90},
keywords={collision avoidance;data visualisation;distributed processing;object detection;virtual reality;adaptive collision prediction tracking;collision detection;collisions prediction;distributed virtual environments;dynamic objects;remote object visualization;Avatars;Bandwidth;Delay;Information technology;Intelligent networks;Object detection;Throughput;Virtual environment;Virtual reality;Visualization},
doi={10.1109/VR.2004.1310059},
ISSN={1087-8270},
month={March},}
--------------------------------------------------------------------------------------------------------------------------------
Collision detection between deformable models is one of fundamental tools of various applications including games. Collision detection can be classified into two categories: discrete and continuous collision detection methods. Discrete collision detection (DCD) has been demonstrated to show the interactive performance by using bounding volume hierarchies (BVHs). However, some colliding primitives may be missed since DCD methods find intersecting primitives only at discrete time steps. This issue can be a very serious problem in physical based simulation, CAD/CAM applications and etc. On the other hand, continuous collision detection (CCD) identifies the first time of contact of colliding primitives during a time interval between two discrete time steps.
@inproceedings{kim2009pccd,
  title={Pccd: Parallel continuous collision detection},
  author={Kim, DukSu and Heo, Jae-Pil and Yoon, Sung-eui},
  booktitle={SIGGRAPH'09: Posters},
  pages={50},
  year={2009},
  organization={ACM}
}
--------------------------------------------------------------------------------------------------------------------------------
The detailed simulation of construction operations remains a challenging task in construction
practice. A tremendous number of labor-hours are required to set key frames of an animation step-by-step and
considerable computational power is needed to render an animation frame-by-frame. This research aims to
utilize a game engine, which has been a rapidly evolving field for over a decade, to reduce the effort required by
developers. The process of developing a construction simulation was separated into three main steps: 3D model
construction, setup of physical properties, and creation of interactive logic. The Blender game engine was
selected as the implementation tool, and a forklift simulation was created to demonstrate the concept. With a
keypad, users could control a virtual forklift to simulate the manipulation of an actual forklift. The simulation
result shows the advantages of developing a game engine-based construction simulation. The quality of the
simulation’s graphics provides a high degree of realism, and the interactivity requirements between user and
computer are satisfied.
@article{juang2011using,
  title={Using game engines for physical based simulations a forklift},
  author={Juang, Jhih Ren and Hung, Wei Han and Kang, Shih Chung},
  journal={Journal of Information Technology in Construction (ITcon)},
  volume={16},
  number={2},
  pages={3--22},
  year={2011}
}
--------------------------------------------------------------------------------------------------------------------------------
The development of modern surgical simulators is highly challenging as they must support complex simulation environments. The demand for higher realism in such simulators has driven researchers to adopt physics-based models which are computationally very demanding. This poses a major problem since real time interactions must permit graphical updates of 30 Hz and a much higher rate of 1 kHz for force feedback (haptics). Recently several physics engines have been developed which offer multi-physics simulation capabilities including rigid and deformable bodies, cloth and fluids. While such physics engines provide unique opportunities for the development of surgical simulators, their higher latencies, compared to what is necessary for real time graphics and haptics, offer significant barriers to their use in interactive simulation environments.
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2810833/
@article {RCS:RCS266,
author = {Maciel, Anderson and Halic, Tansel and Lu, Zhonghua and Nedel, Luciana P. and De, Suvranu},
title = {Using the PhysX engine for physics-based virtual surgery with force feedback},
journal = {The International Journal of Medical Robotics and Computer Assisted Surgery},
volume = {5},
number = {3},
publisher = {John Wiley & Sons, Ltd.},
issn = {1478-596X},
url = {http://dx.doi.org/10.1002/rcs.266},
doi = {10.1002/rcs.266},
pages = {341--353},
keywords = {computer graphics, interaction techniques, physics-based simulation, minimally invasive surgery, user interfaces–haptic I/O},
year = {2009},
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{PhysX,
    author = {Nvidia},
    title = {PhysX Knowledge Base/FAQ | {Nvidia UK}},
    url = {https://www.nvidia.com/object/physx_knowledge_base.html},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@inproceedings{schiele2007requirements,
  title={Requirements of peer-to-peer-based massively multiplayer online gaming},
  author={Schiele, Gregor and Suselbeck, Richard and Wacker, Arno and Hahner, Jorg and Becker, Christian and Weis, Torben},
  booktitle={Cluster Computing and the Grid, 2007. CCGRID 2007. Seventh IEEE International Symposium on},
  pages={773--782},
  year={2007},
  organization={IEEE}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{Cloudgin77:online,
    author = {Sumo Digital},
    title = {Cloudgine Interview: Crackdown 3 and Clouds of Destruction},
    url = {http://gamingbolt.com/cloudgine-interview-crackdown-3-and-clouds-of-destruction},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@unpublished{gpgpuphysics:online,
author = {Simon Green},
title = {GPGPU Physics},
month = {},
year = {2007},
note = {Siggraph 2007}
}
--------------------------------------------------------------------------------------------------------------------------------
@unpublished{introtompi:online,
author = {Pavan Balaji},
title = {Introduction to MPI},
month = {March},
year = {2015},
note = {Shanghai Jiaotong University}
}
--------------------------------------------------------------------------------------------------------------------------------
@INPROCEEDINGS{On-DemandResourceMMOGs, 
author={A. P. Negrãlo and M. Adaixo and L. Veiga and P. Ferreira}, 
booktitle={2014 IEEE 13th International Symposium on Network Computing and Applications}, 
title={On-Demand Resource Allocation Middleware for Massively Multiplayer Online Games}, 
year={2014}, 
volume={}, 
number={}, 
pages={71-74}, 
abstract={Traditionally, commercial MMOGs are deployed on large privately owned server clusters with hundreds of computing devices linked through high bandwidth connections. In this scenario, the dynamic and unpredictable workload variability of MMOGs frequently leads to resources being under/over used with negative impact on playability and/or cost-effectiveness. In our research work, we see cloud computing as a fundamental approach to mitigate the problem of inefficient resource provisioning, due to its inherent elasticity properties. Thus, we propose a cloud-aware middleware for MMOGs, in which virtual machines obtained from cloud providers are added and removed from the system according to load changes observed at runtime. In this paper, we report on our first steps towards such an infrastructure.}, 
keywords={cloud computing;computer games;middleware;resource allocation;virtual machines;MMOGs;cloud computing;cloud-aware middleware;massively multiplayer online games;resource allocation;virtual machines;Cloud computing;Companies;Games;Load management;Measurement;Servers;Cloud Computing;MMOGs;Resource Provisioning}, 
doi={10.1109/NCA.2014.16}, 
ISSN={}, 
month={Aug},}
--------------------------------------------------------------------------------------------------------------------------------
@misc{WorldsAd48:online,
author = {Bossa Studios},
title = {Worlds Adrift},
howpublished = {\url{https://www.worldsadrift.com/}},
month = {},
year = {2019},
note = {(Accessed on 22/02/2019)}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{Vanishin30:online,
author = {NINPO},
title = {Vanishing Stars: Colony Wars by NINPO},
howpublished = {\url{http://www.vanishingstars.com/}},
month = {},
year = {2019},
note = {(Accessed on 22/02/2019)}
}
--------------------------------------------------------------------------------------------------------------------------------
@INPROCEEDINGS{AnOverlappingArchitecture, 
author={L. Dong and Z. Yue-Long}, 
booktitle={2013 Fourth International Conference on Emerging Intelligent Data and Web Technologies}, 
title={An Overlapping Architecture for ROIA in Cloud}, 
year={2013}, 
volume={}, 
number={}, 
pages={61-65}, 
keywords={client-server systems;cloud computing;interactive systems;peer-to-peer computing;software architecture;CS mode;P2P mode;ROIA;cloud computing environment;concurrent users;large scale distributed application;overlapping architecture;real-time online interactive application;seamless migration;server crash;zoning technique;Cloud computing;Computer architecture;Computer crashes;Games;Load management;Scalability;Servers;Cloud;MMOG;Overlapping Architecture;ROIA}, 
doi={10.1109/EIDWT.2013.15}, 
ISSN={}, 
month={Sept},}
--------------------------------------------------------------------------------------------------------------------------------
@INPROCEEDINGS{ScalabilityforVirtualWorlds, 
author={N. Gupta and A. Demers and J. Gehrke and P. Unterbrunner and W. White}, 
booktitle={2009 IEEE 25th International Conference on Data Engineering}, 
title={Scalability for Virtual Worlds}, 
year={2009}, 
volume={}, 
number={}, 
pages={1311-1314}, 
keywords={distributed databases;transaction processing;virtual reality;distributed databases;logic processing;net-VE;networked virtual environments;transaction processing;Access protocols;Computer science;Data engineering;Data security;Delay;Logic;Scalability;Second Life;Transaction databases;Virtual environment;Distributed systems;Scalability;Simulations;Virtual Worlds}, 
doi={10.1109/ICDE.2009.228}, 
ISSN={1063-6382}, 
month={March},}
--------------------------------------------------------------------------------------------------------------------------------
@ARTICLE{High-performanceServerSystems, 
author={B. D'Amora and A. Nanda and K. Magerlein and A. Binstock and B. Yee}, 
journal={IBM Systems Journal}, 
title={High-performance server systems and the next generation of online games}, 
year={2006}, 
volume={45}, 
number={1}, 
pages={103-118}, 
abstract={Developing a massively multiplayer online game which utilizes physically based simulation to provide realistic behaviors requires numerical integration functions with inherently high computational costs. This simulation, performed on the individual clients of a peer-to-peer networked game or for a client/server online game, presents challenges due to many factors, including limited computing resources at the client level and network latency in the propagation of a client's state to other clients. Computationally intensive simulation may adversely affect performance and result in a situation in which little processing capacity is left for other aspects of the game. In this paper, we explore how a game developer who is aware of these issues might create a game for IBM's recently announced Cell Broadband Engine™ processor; we also present an example of the development of a game in which multiple human and robotic characters interact with static and dynamic objects in a virtual environment. Although our experience suggests that porting code to the Cell Broadband Engine core with minimal use of its synergistic processing elements (SPEs) should not be expected to produce significant performance gains at this time, the potential of the Cell SPEs to improve performance is considerable. We discuss performance and design and implementation decisions, with programmability issues being especially noted.}, 
keywords={}, 
doi={10.1147/sj.451.0103}, 
ISSN={0018-8670}, 
month={},}
--------------------------------------------------------------------------------------------------------------------------------
@ARTICLE{VON, 
author={Shun-Yun Hu and Jui-Fa Chen and Tsu-Han Chen}, 
journal={IEEE Network}, 
title={VON: a scalable peer-to-peer network for virtual environments}, 
year={2006}, 
volume={20}, 
number={4}, 
pages={22-31}, 
abstract={The scalability of large-scale networked virtual environments (NVEs) such as today's massively multiplayer online games (MMOGs) faces inherent limits imposed by client-server architectures. We identify an emerging research direction that applies peer-to-peer (P2P) networks in order to realize more scalable and affordable NVEs. The central issue for P2P-based NVE (P2P-NVE) systems is to correctly and efficiently maintain the topology of all participating peers by solving the neighbor discovery problem. We also propose the Voronoi-based overlay network (VON), a simple and efficient design that maintains the P2P topology in a fully-distributed, low-latency, and message-efficient manner. Simulation results show that by bounding the per-node resource consumption, VON can be fundamentally more scalable than existing methods while achieving high topology consistency and reliability}, 
keywords={client-server systems;computer games;peer-to-peer computing;telecommunication network topology;P2P topology;P2P-based NVE systems;VON;Voronoi-based overlay network;client-server architectures;large-scale networked virtual environment scalability;massively multiplayer online games;neighbor discovery problem;per-node resource consumption;scalable peer-to-peer network;Availability;Bandwidth;Delay;Information security;Maintenance;Network topology;Peer to peer computing;Physics;Scalability;Virtual environment}, 
doi={10.1109/MNET.2006.1668400}, 
ISSN={0890-8044}, 
month={July},}
--------------------------------------------------------------------------------------------------------------------------------
The virtual world is divided into a grid of cells. Each server manages a group of adjacent cells. Load balancing is achieved by transferring cells from an overloaded server to its neighboring servers. 
@INPROCEEDINGS{LoadBalancingForDistributedVR, 
author={T. G. de Senna Carneiro and J. N. Cotrim Arabe}, 
booktitle={Computer Graphics, Image Processing, and Vision, 1998. Proceedings. SIBGRAPI '98. International Symposium on}, 
title={Load balancing for distributed virtual reality systems}, 
year={1998}, 
volume={}, 
number={}, 
pages={158-165}, 
abstract={Due to the concentration of users in certain regions of the virtual world, distributed virtual reality systems-DVRS-may become unbalanced, resulting in low performance and bad utilization of system resources. The authors studied this problem and proposed a queueing model and load balancing algorithms to reduce these effects. Some experiments showed how the utilization and response time of the system change as the number of users increases. They noticed that the overhead imposed by load balancing algorithms is low, except for the symmetrically-initiated algorithm. The other algorithms, sender-initiated and receiver-initiated, increase in less than 1 ms the mean response time of the servers when the unbalanced degree is low. When this unbalanced degree is high, these algorithms can improve the global system performance and decrease the response time of overloaded servers}, 
keywords={distributed processing;queueing theory;resource allocation;virtual reality;distributed virtual reality systems;global system performance;load balancing algorithms;overloaded servers;queueing model;receiver-initiated algorithm;sender-initiated algorithm;symmetrically-initiated algorithm;system response time;system utilization;Computational modeling;Databases;Delay;Hardware;Load management;Load modeling;System performance;Virtual environment;Virtual reality;Workstations}, 
doi={10.1109/SIBGRA.1998.722746}, 
ISSN={}, 
month={Oct},}
--------------------------------------------------------------------------------------------------------------------------------
The virtual world is divided into a grid of cells. Each server manages a group of adjacent cells. Load balancing is achieved by transferring cells from an overloaded server to its neighboring servers. 
@INPROCEEDINGS{ScalabilityIssues, 
author={M. Hori and T. Iseri and K. Fujikawa and S. Shimojo and H. Miyahara}, 
booktitle={2001 IEEE Pacific Rim Conference on Communications, Computers and Signal Processing (IEEE Cat. No.01CH37233)}, 
title={Scalability issues of dynamic space management for multiple-server networked virtual environments}, 
year={2001}, 
volume={1}, 
number={}, 
pages={200-203 vol.1}, 
abstract={This paper discusses the scalability issues of networked virtual environments (net-VEs). A most important problem of net-VEs is that the performance of the system is remarkably deteriorated when users increase in number. To solve this problem, we proposed two methods. The first method tries to equalize the load in each server by dynamically adjusting the size of the space managed by each server. The second method tries to reduce the amount of operations by changing the size of a management unit of the virtual space. To evaluate the proposed methods, we developed a multiple-server networked game called "CittaTron". Through several experiments, we show the effectiveness of our proposed method}, 
keywords={client-server systems;computer network management;virtual reality;CittaTron;area of interest;dynamic space management;level of detail;multiple-server networked game;multiple-server networked virtual environments;partitioning;scalability issues;Communications technology;Electronic mail;Environmental management;IP networks;Industrial training;Informatics;Network servers;Scalability;Virtual environment;Web server}, 
doi={10.1109/PACRIM.2001.953557}, 
ISSN={}, 
month={},}
--------------------------------------------------------------------------------------------------------------------------------
Divided vertically on the x-axis. Dynamic load balancing is achieved by relocating the partition line along the X-axis
@INPROCEEDINGS{ALoadBalancingAlgorithm, 
author={Dugki Min and E. Choi and Donghoon Lee and Byungseok Park}, 
booktitle={Proceedings IEEE International Conference on Multimedia Computing and Systems}, 
title={A load balancing algorithm for a distributed multimedia game server architecture}, 
year={1999}, 
volume={2}, 
number={}, 
pages={882-886 vol.2}, 
abstract={Network game servers, in which a huge number of users can play a common game through interconnecting network, can be designed in a distributed system architecture with the benefit of scalability, reliability, and cost effectiveness. In order to develop an efficient and scalable network game server system, the paper investigates the issue of load balancing for dynamic change of workload in a network game. We propose a dynamic load balancing algorithm for network games which takes into account the geographical relationship among game units and the short response time of frequent user interactions. We also present simulation results of the proposed algorithm}, 
keywords={client-server systems;computer games;multimedia servers;resource allocation;cost effectiveness;distributed multimedia game server architecture;distributed system architecture;dynamic change;dynamic load balancing algorithm;frequent user interactions;game units;geographical relationship;interconnecting network;load balancing;load balancing algorithm;scalability;scalable network game server system;short response time;workload;Computer architecture;Computer science;Delay;Design engineering;Games;Heuristic algorithms;Load management;Multimedia systems;Network servers;Reliability engineering}, 
doi={10.1109/MMCS.1999.778604}, 
ISSN={}, 
month={Jul},
}
--------------------------------------------------------------------------------------------------------------------------------
@Inbook{Xu2017,
author={Xu, Jianxi
and Tang, Zhao
and Wei, Xihui
and Nie, Yinyu
and Yuan, Xiaolin
and Ma, Zong
and Zhang, Jian J.},
title={A VR-Based Crane Training System for Railway Accident Rescues},
bookTitle={Next Generation Computer Animation Techniques: Third International Workshop, AniNex 2017, Bournemouth, UK, June 22-23, 2017, Revised Selected Papers},
year={2017},
publisher={Springer International Publishing},
address={Cham},
pages={207--219},
isbn={978-3-319-69487-0},
doi={10.1007/978-3-319-69487-0_15}
}
--------------------------------------------------------------------------------------------------------------------------------
@Inbook{Lu2017,
author={Lu, Xinzheng
and Guan, Hong},
title={Visualization for Earthquake Disaster Simulation of Urban Buildings},
bookTitle={Earthquake Disaster Simulation of Civil Infrastructures: From Tall Buildings to Urban Areas},
year={2017},
publisher={Springer Singapore},
address={Singapore},
pages={303--326},
abstract={A seismic simulation of a single building is often concerned by structural engineering experts. In contrast, the outcomes of seismic simulation of an urban area are often used by the planning, administration, and emergence agencies of a city in addition to the engineering experts.},
isbn={978-981-10-3087-1},
doi={10.1007/978-981-10-3087-1_9},
}
--------------------------------------------------------------------------------------------------------------------------------
@Inbook{Shah2018,
author={Shah, Shital
and Dey, Debadeepta
and Lovett, Chris
and Kapoor, Ashish},
editor={Hutter, Marco
and Siegwart, Roland},
title={AirSim: High-Fidelity Visual and Physical Simulation for Autonomous Vehicles},
bookTitle={Field and Service Robotics: Results of the 11th International Conference},
year={2018},
publisher={Springer International Publishing},
address={Cham},
pages={621--635},
abstract={Developing and testing algorithms for autonomous vehicles in real world is an expensive and time consuming process. Also, in order to utilize recent advances in machine intelligence and deep learning we need to collect a large amount of annotated training data in a variety of conditions and environments. We present a new simulator built on Unreal Engine that offers physically and visually realistic simulations for both of these goals. Our simulator includes a physics engine that can operate at a high frequency for real-time hardware-in-the-loop (HITL) simulations with support for popular protocols (e.g. MavLink). The simulator is designed from the ground up to be extensible to accommodate new types of vehicles, hardware platforms and software protocols. In addition, the modular design enables various components to be easily usable independently in other projects. We demonstrate the simulator by first implementing a quadrotor as an autonomous vehicle and then experimentally comparing the software components with real-world flights.},
isbn={978-3-319-67361-5},
doi={10.1007/978-3-319-67361-5_40},
}
--------------------------------------------------------------------------------------------------------------------------------
@article{Npsnet,
author = {Macedonia, Michael and J. Zyda, Michael and R. Pratt, David and T. Barham, Paul and Zeswitz, Steven},
year = {1994},
month = {01},
pages = {265-287},
title = {Npsnet: A Network Software Architecture For Large Scale Virtual Environments},
volume = {3},
booktitle = {Presence}
}
--------------------------------------------------------------------------------------------------------------------------------
@inproceedings{Morgan2005InterestManagement,
 author = {Morgan, Graham and Lu, Fengyun and Storey, Kier},
 title = {Interest Management Middleware for Networked Games},
 booktitle = {Proceedings of the 2005 Symposium on Interactive 3D Graphics and Games},
 series = {I3D '05},
 year = {2005},
 isbn = {1-59593-013-2},
 location = {Washington, District of Columbia},
 pages = {57--64},
 numpages = {8},
 doi = {10.1145/1053427.1053436},
 acmid = {1053436},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {middleware, games, networking},
}
--------------------------------------------------------------------------------------------------------------------------------
@INPROCEEDINGS{Greenhalgh,
author={C. Greenhalgh and S. Benford},
booktitle={Proceedings of 15th International Conference on Distributed Computing Systems},
title={MASSIVE: a distributed virtual reality system incorporating spatial trading},
year={1995},
volume={},
number={},
pages={27-34},
keywords={distributed processing;groupware;naming services;remote procedure calls;virtual reality;MASSIVE;attributes;aura manager;communications architecture;distributed virtual reality system;remote procedure calls;spatial interface trading service;streams;typed connections;user interaction;Communication system control;Computational modeling;Computer graphics;Computer science;Context;Context modeling;Context-aware services;Graphics;Parallel processing;Streaming media;Virtual environment;Virtual reality},
doi={10.1109/ICDCS.1995.499999},
ISSN={1063-6927},
month={May},}
--------------------------------------------------------------------------------------------------------------------------------
@ARTICLE{iCloudAccess,
author={D. Wu and Z. Xue and J. He},
journal={IEEE Transactions on Circuits and Systems for Video Technology},
title={iCloudAccess: Cost-Effective Streaming of Video Games From the Cloud With Low Latency},
year={2014},
volume={24},
number={8},
pages={1405-1416},
keywords={Lyapunov methods;cloud computing;computer games;optimisation;quality of experience;telecommunication control;Lyapunov optimization theory;cloud gaming service providers;constrained stochastic optimization problem;high-end video games;iCloudAccess;inelastic server provisioning;intelligent request dispatching;large-scale cloud gaming platform;latency problem;online control algorithm;queueing delay;response delay;user quality-of-experience requirements;user-specified request routing;Cloud computing;Delays;Dispatching;Games;Optimization;Servers;Streaming media;Cloud Gaming;Cloud gaming;Lyapunov optimization;Video Streaming;video streaming},
doi={10.1109/TCSVT.2014.2302543},
ISSN={1051-8215},
month={Aug},}
--------------------------------------------------------------------------------------------------------------------------------
@article{GARCIAVALLS,
title = {Challenges in real-time virtualization and predictable cloud computing},
journal = {Journal of Systems Architecture},
volume = {60},
number = {9},
pages = {726 - 740},
year = {2014},
issn = {1383-7621},
doi = {https://doi.org/10.1016/j.sysarc.2014.07.004},
url = {http://www.sciencedirect.com/science/article/pii/S1383762114001015},
author = {Marisol Garc{\'i}a-Valls and Tommaso Cucinotta and Chenyang Lu},
keywords = {Cloud computing, Soft real-time systems, Virtualization, Resource management, Quality of service, SLA}
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{PSNOW,
    author = {Sony},
    title = {PlayStation Now},
    url = {https://www.playstation.com/en-gb/explore/playstation-now/},
	year = {2019},
    note = {(Accessed on 22/02/2019)}

}
--------------------------------------------------------------------------------------------------------------------------------
@misc{NVidiaGameStream,
    author = {Nvidia},
    title = {Game Stream},
    url = {https://www.nvidia.co.uk/shield/games/gamestream/},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}
--------------------------------------------------------------------------------------------------------------------------------
@ARTICLE{Wang,
author={X. Wang and C. Wang and J. Zhang and M. Zhou and C. Jiang},
journal={IEEE Transactions on Intelligent Transportation Systems},
title={Improved Rule Installation for Real-Time Query Service in Software-Defined Internet of Vehicles},
year={2017},
volume={18},
number={2},
pages={225-235},
doi={10.1109/TITS.2016.2543600},
ISSN={1524-9050},
month={Feb}
}
--------------------------------------------------------------------------------------------------------------------------------
@article{Kumar,
  author    = {Rakesh Kumar and
               Monowar Hasan and
               Smruti Padhy and
               Konstantin Evchenko and
               Lavanya Piramanayagam and
               Sibin Mohan and
               Rakesh B. Bobba},
  title     = {Dependable End-to-End Delay Constraints for Real-Time Systems using
               SDNs},
  journal   = {CoRR},
  volume    = {abs/1703.01641},
  year      = {2017},
  archivePrefix = {arXiv},
  eprint    = {1703.01641},
  timestamp = {Wed, 07 Jun 2017 14:41:04 +0200},
  biburl    = {http://dblp.org/rec/bib/journals/corr/KumarHPEPMB17},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
--------------------------------------------------------------------------------------------------------------------------------
@inproceedings{LoadBalancingforMMOs,
 author = {Lu, Fengyun and Parkin, Simon and Morgan, Graham},
 title = {Load Balancing for Massively Multiplayer Online Games},
 booktitle = {Proceedings of 5th ACM SIGCOMM Workshop on Network and System Support for Games},
 series = {NetGames '06},
 year = {2006},
 isbn = {1-59593-589-4},
 location = {Singapore},
 articleno = {1},
 url = {http://doi.acm.org/10.1145/1230040.1230064},
 doi = {10.1145/1230040.1230064},
 acmid = {1230064},
 publisher = {ACM},
 address = {New York, NY, USA},
}
--------------------------------------------------------------------------------------------------------------------------------
@article{P2PForMMOs,
 author = {Yahyavi, Amir and Kemme, Bettina},
 title = {Peer-to-peer Architectures for Massively Multiplayer Online Games: A Survey},
 journal = {ACM Comput. Surv.},
 issue_date = {October 2013},
 volume = {46},
 number = {1},
 month = jul,
 year = {2013},
 issn = {0360-0300},
 pages = {9:1--9:51},
 articleno = {9},
 numpages = {51},
 url = {http://doi.acm.org/10.1145/2522968.2522977},
 doi = {10.1145/2522968.2522977},
 acmid = {2522977},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Peer-to-peer networking, cheating, commercial applications, consistency control, fault tolerance, incentives, interest management, massively multiplayer online games, multicasting, network overlays, replication},
}
--------------------------------------------------------------------------------------------------------------------------------
@misc{NVIDIACloud,
    author = {Nvidia},
    title = {Cloud Gaming - Gaming as a Service (GaaS) | GRID|NVIDIA},
    url = {http://www.nvidia.com/object/cloud-gaming.html},
    urldate = {2017-12-21},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}

--------------------------------------------------------------------------------------------------------------------------------
@misc{WOW,
    author = {Blizzard},
    title = {World of Warcraft},
    url = {https://worldofwarcraft.com/en-us/},
    urldate = {2017-12-28},
    note = {(Accessed on 22/02/2019)},
    year = {2019}
}
@inproceedings{shah2018distributing,
	title={Distributing and Load Balancing Sparse Fluid Simulations},
	author={Shah, C and Hyde, D and Qu, H and Levis, P},
	booktitle={Computer Graphics Forum},
	volume={37},
	number={8},
	pages={35--46},
	year={2018},
	organization={Wiley Online Library}
}

@article{mashayekhi2018automatically,
	title={Automatically Distributing Eulerian and Hybrid Fluid Simulations in the Cloud},
	author={Mashayekhi, Omid and Shah, Chinmayee and Qu, Hang and Lim, Andrew and Levis, Philip},
	journal={ACM Transactions on Graphics (TOG)},
	volume={37},
	number={2},
	pages={24},
	year={2018},
	publisher={ACM}
}